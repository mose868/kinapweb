rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasValidFields(required, optional) {
      let allFields = required.concat(optional);
      return request.resource.data.keys().hasAll(required) &&
             request.resource.data.keys().hasOnly(allFields);
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.clientId == request.auth.uid
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Testimonials collection
    match /testimonials/{testimonialId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Stories collection
    match /stories/{storyId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Chatbot messages collection
    match /chatbot_messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }

    // Marketplace items collection
    match /marketplace_items/{itemId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid
      );
      allow delete: if false;
    }

    // Payments collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        resource.data.orderId in get(/databases/$(database)/documents/orders/$(orderId)).data.buyerId == request.auth.uid ||
        resource.data.orderId in get(/databases/$(database)/documents/orders/$(orderId)).data.sellerId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if false; // Only backend can update payments
      allow delete: if false;
    }

    // Escrow transactions collection
    match /escrow_transactions/{transactionId} {
      allow read: if isAuthenticated() && (
        resource.data.orderId in get(/databases/$(database)/documents/orders/$(orderId)).data.buyerId == request.auth.uid ||
        resource.data.orderId in get(/databases/$(database)/documents/orders/$(orderId)).data.sellerId == request.auth.uid
      );
      allow create: if false; // Only backend can create escrow transactions
      allow update: if false; // Only backend can update escrow transactions
      allow delete: if false;
    }

    // Payment methods collection
    match /payment_methods/{methodId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Payment analytics collection
    match /payment_analytics/{analyticsId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if false; // Only backend can create analytics
      allow update: if false;
      allow delete: if false;
    }

    // Withdrawals collection
    match /withdrawals/{withdrawalId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if false; // Only backend can update withdrawal status
      allow delete: if false;
    }

    // Payout settings collection
    match /payout_settings/{settingsId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Milestones collection
    match /milestones/{milestoneId} {
      allow read: if isAuthenticated() && (
        get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.buyerId == request.auth.uid ||
        get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.sellerId == request.auth.uid
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.buyerId == request.auth.uid ||
        get(/databases/$(database)/documents/orders/$(resource.data.orderId)).data.sellerId == request.auth.uid
      );
      allow delete: if false;
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
} 